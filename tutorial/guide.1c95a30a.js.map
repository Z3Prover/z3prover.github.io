{"mappings":"mEACsB,oBAAXA,QACPC,KAAKC,iBAAiB,WAAW,IAAMD,KAAKE,gBAC5CF,KAAKC,iBAAiB,YAAaE,GAAUA,EAAMC,UAAUJ,KAAKK,QAAQC,WAE1EN,KAAKC,iBAAiB,WAAYM,IAC1BA,EAAGC,MAAyB,eAAjBD,EAAGC,KAAKC,MACnBT,KAAKU,aACAC,aACAC,MAAK,IACKZ,KAAKK,QAAQQ,aAEvBD,MAAKP,IACFA,EAAQS,SAASC,GAAWA,EAAOC,SAASD,EAAOE,aAKnEjB,KAAKC,iBAAiB,SAAS,SAAUE,GACT,mBAAxBA,EAAMe,QAAQC,OAAqD,gBAAvBhB,EAAMe,QAAQE,MAI9DjB,EAAMkB,YACFC,MAAMnB,EAAMe,SACPN,MAAMW,IACH,GAAwB,IAApBA,EAASC,OACT,OAAOD,EAGX,MAAME,EAAa,IAAIC,QAAQH,EAASI,SAIxC,OAHAF,EAAWG,IAAI,+BAAgC,gBAC/CH,EAAWG,IAAI,6BAA8B,eAEtC,IAAIC,SAASN,EAASO,KAAM,CAC/BN,OAAQD,EAASC,OACjBO,WAAYR,EAASQ,WACrBJ,QAASF,OAGhBO,OAAOC,GAAMC,QAAQC,MAAMF,UAKvC,MAEG,MAAMG,EAAM,CACRC,eAAgB,KAAM,EACtBC,iBAAkB,KAAM,EACxBC,SAAU,IAAMxC,OAAOyC,SAASC,SAChCC,OAAO,KACJ3C,OAAOqC,KAGRO,EAAIC,UACNR,EAAIE,oBAAsBK,EAAEE,eAAiBF,EAAEE,cAAcC,YAC7DH,EAAEE,cAAcC,WAAWC,YAAY,CAAEtC,KAAM,gBAKhB,IAA/BV,OAAOiD,qBAAkCZ,EAAIC,mBAE5CtC,OAAOkD,gBAMRN,EAAEE,eACFF,EAAEE,cAAcK,SAASnD,OAAOoD,SAASC,cAAcC,KAAKzC,MACvDF,IACI0B,EAAIM,MAAQR,QAAQoB,IAAI,sCAAuC5C,EAAa6C,OAE7E7C,EAAaT,iBAAiB,eAAe,MACxCmC,EAAIM,OAASR,QAAQoB,IAAI,mEAC1BlB,EAAIG,cAIJ7B,EAAa8C,SAAWb,EAAEE,cAAcC,cACvCV,EAAIM,OAASR,QAAQoB,IAAI,2DAC1BlB,EAAIG,eAGXkB,KACIrB,EAAIM,OAASR,QAAQC,MAAM,+CAAgDsB,OAtBnFrB,EAAIM,OAASR,QAAQoB,IAAI,4EApBjC","sources":["node_modules/coi-serviceworker/coi-serviceworker.js"],"sourcesContent":["/*! coi-serviceworker v0.1.6 - Guido Zuidhof, licensed under MIT */\nif (typeof window === 'undefined') {\n    self.addEventListener(\"install\", () => self.skipWaiting());\n    self.addEventListener(\"activate\", (event) => event.waitUntil(self.clients.claim()));\n\n    self.addEventListener(\"message\", (ev) => {\n        if (ev.data && ev.data.type === \"deregister\") {\n            self.registration\n                .unregister()\n                .then(() => {\n                    return self.clients.matchAll();\n                })\n                .then(clients => {\n                    clients.forEach((client) => client.navigate(client.url));\n                });\n        }\n    });\n\n    self.addEventListener(\"fetch\", function (event) {\n        if (event.request.cache === \"only-if-cached\" && event.request.mode !== \"same-origin\") {\n            return;\n        }\n\n        event.respondWith(\n            fetch(event.request)\n                .then((response) => {\n                    if (response.status === 0) {\n                        return response;\n                    }\n\n                    const newHeaders = new Headers(response.headers);\n                    newHeaders.set(\"Cross-Origin-Embedder-Policy\", \"require-corp\");\n                    newHeaders.set(\"Cross-Origin-Opener-Policy\", \"same-origin\");\n\n                    return new Response(response.body, {\n                        status: response.status,\n                        statusText: response.statusText,\n                        headers: newHeaders,\n                    });\n                })\n                .catch((e) => console.error(e))\n        );\n    });\n\n} else {\n    (() => {\n        // You can customize the behavior of this script through a global `coi` variable.\n        const coi = {\n            shouldRegister: () => true,\n            shouldDeregister: () => false,\n            doReload: () => window.location.reload(),\n            quiet: false,\n            ...window.coi\n        }\n\n        const n = navigator;\n        if (coi.shouldDeregister() && n.serviceWorker && n.serviceWorker.controller) {\n            n.serviceWorker.controller.postMessage({ type: \"deregister\" });\n        }\n\n        // If we're already coi: do nothing. Perhaps it's due to this script doing its job, or COOP/COEP are\n        // already set from the origin server. Also if the browser has no notion of crossOriginIsolated, just give up here.\n        if (window.crossOriginIsolated !== false || !coi.shouldRegister()) return;\n\n        if (!window.isSecureContext) {\n            !coi.quiet && console.log(\"COOP/COEP Service Worker not registered, a secure context is required.\");\n            return;\n        }\n\n        // In some environments (e.g. Chrome incognito mode) this won't be available\n        if (n.serviceWorker) {\n            n.serviceWorker.register(window.document.currentScript.src).then(\n                (registration) => {\n                    !coi.quiet & console.log(\"COOP/COEP Service Worker registered\", registration.scope);\n\n                    registration.addEventListener(\"updatefound\", () => {\n                        !coi.quiet && console.log(\"Reloading page to make use of updated COOP/COEP Service Worker.\");\n                        coi.doReload()\n                    });\n\n                    // If the registration is active, but it's not controlling the page\n                    if (registration.active && !n.serviceWorker.controller) {\n                        !coi.quiet && console.log(\"Reloading page to make use of COOP/COEP Service Worker.\");\n                        coi.doReload()\n                    }\n                },\n                (err) => {\n                    !coi.quiet && console.error(\"COOP/COEP Service Worker failed to register:\", err);\n                }\n            );\n        }\n    })();\n}\n"],"names":["window","self","addEventListener","skipWaiting","event","waitUntil","clients","claim","ev","data","type","registration","unregister","then","matchAll","forEach","client","navigate","url","request","cache","mode","respondWith","fetch","response","status","newHeaders","Headers","headers","set","Response","body","statusText","catch","e","console","error","coi","shouldRegister","shouldDeregister","doReload","location","reload","quiet","n","navigator","serviceWorker","controller","postMessage","crossOriginIsolated","isSecureContext","register","document","currentScript","src","log","scope","active","err"],"version":3,"file":"guide.1c95a30a.js.map"}